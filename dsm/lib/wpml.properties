#  ---------------------------------------------------------------------------
#  Copyright IBM Corporation 2008, 2011.
#  
#  GOVERNMENT PURPOSE RIGHTS
#  
#  Contract No. W911NF-06-3-0002
#  Contractor Name: IBM 
#  Contractor Address:  IBM T. J. Watson Research Center.
#                       19 Skyline Drive
#                      Hawthorne, NY 10532 
# 
#  The Government's rights to use, modify, reproduce, release, perform, 
#  display or disclose this software are restricted by Article 10 
#  Intellectual Property Rights clause contained in the above 
#  identified contract. Any reproductions of the software or portions 
#  thereof marked with this legend must also reproduce the markings.
#  ---------------------------------------------------------------------------
# This file provides properties to the Watson Policy Management Library.
# It is read by PMLUtilities.getWPMLProperty() which is used at 
# various places in the library to configure behavior.  See below for
# details.
#
############################## Logging #########################################
#
# Set this to true or false to enable/disable java.util.logging in WPML.
# In general, you should not set this to false, and instead should modify
# the level.  This primarily to avoid missing error and warning messages.
logging.enabled=true
# Level of top level PML logging: ALL, SEVERE, WARNING, INFO, FINE, FINER, FINEST or ALL.
# To control the logging level of individual components, see the details properties
# at the end of this file.
com.ibm.watson.pml.level=INFO
############################ PolicyEvaluator Configuration #####################
#
# Control the implementation of IPolicyEvaluator returned by 
# SingletonPolicyEvaluator.instance().May be one of 'rmi', 'singleton-pdp', 
# or a class name, as follows:
# rmi - use an RMIPolicyEvaluatorClient and connect to a remote RMI decision server.
# singleton-pdp - use a PolicyDecisionPoint with repositories configured
# 				by singleton.pdp.repository, see below.
# class name - an IPolicyEvaluator implementation with a zero-args constructor.
# if not specified, then singleton-pdp is assumed.
singleton.evaluator.type=singleton-pdp
#
####################### Policy Decision Point Configuration ####################
#
# Set the repository implementations to use for the SingletonDecisionPoint 
# instance.  May be one of 
#    'jdbc' (see jdbc properties below), 
#    'memory', 
#    'gaiandb' (see gaindb properties below), 
#    'grid' (requires wpml-grid.jar file)
#    'file[{id[,path]}]' (e.g.file{myid}, file{myid,c:/temp} or file) 
#     or a pair of class names, where the classes implement IPolicyRepository 
#       and IPEPRepository, respectively, and provide a zero-args constructor.
# If not using class names, the 'failover' specifier can be appended (e.g., 
# 'jdbc,failover') to indicate that a file-based replica of the primary 
# repository should be used.  If the primary fails, then the file-based 
# repository will be used.  The location of the repository is in the
# directory defined by the java.io.tmpdir system property.  The id of the
# repository is 'Policy-Failover' for policy and 'PEP-Failover' for PEP.
#singleton.pdp.repository=grid,failover
singleton.pdp.repository=jdbc,failover
singleton.pdp.repository=grid,failover
#singleton.pdp.repository=grid
#singleton.pdp.repository=com.ibm.watson.pml.repository.objectgrid.client.GridClientPolicyRepository,com.ibm.watson.pml.repository.irepository.PEPRepository
singleton.pdp.repository=file{sdp,c:/temp}
#
# Can be used to initially clear the policy repository used by the singleton pdp.
# This is primarily intended for debugging, but you may find otherwise.
#singleton.pdp.policy.clear=true
#
# Can be used to initially load a set of policies, in a comma-separated list of files,
# into the singleton pdp policy repository.  This is done after a clear, if requested.
# Again, this is primarily intended for debugging, but you may find otherwise.
singleton.pdp.policy.preload-file=platform.policies
#
################################ Fail Over Repositories ########################
# Minimum amount of time required before a subsequent connect() on the failover
# repository will retry to connect the primary.  Default is 0, so is always retrys.
#failover.primary.retryRateMsec=30000
################################ Policy caching #################################
#
# These can be change or set to 0 for debugging.
# This is the size of the 
#com.ibm.watson.pml.pdp.PolicyDecisionPoint.cacheSize=0 
#com.ibm.watson.pml.repository.jdbc.JDBCPolicyRepository.cacheSize=0 
#
# ############################## Additional Policy Factories ####################
#com.ibm.watson.pml.policy.PolicyFactoryRegistry.factoryClasses=com.ibm.watson.dsm.pml.policy.DSMSQLPolicyFactory
######################################## JDBC Configuration ###################
#
# Mysql settings
#
#jdbc.drivers=com.mysql.jdbc.Driver
#jdbc.url=jdbc:mysql://localhost:3306/WPML
#jdbc.username=root
#jdbc.password=wpml
# 
# Derby settings
#
jdbc.drivers=org.apache.derby.jdbc.ClientDriver
#jdbc.url=jdbc:derby://oyster.watson.ibm.com:1527/WPML
jdbc.url=jdbc:derby://localhost:1527/WPML
jdbc.username=root
jdbc.password=wpml
#
# Gaian
#
gaiandb.read.jdbc.drivers=org.apache.derby.jdbc.ClientDriver
gaiandb.read.jdbc.url=jdbc:derby://localhost:6414/gaiandb
gaiandb.read.jdbc.username=gaiandb
gaiandb.read.jdbc.password=passw0rd
gaiandb.write.jdbc.drivers=org.apache.derby.jdbc.ClientDriver
gaiandb.write.jdbc.url=jdbc:derby://localhost:1527/WPML
gaiandb.write.jdbc.username=root
gaiandb.write.jdbc.password=wpml
#
# Server-independent settings
#
######################### Object Grid Settings ###################################
# When preparing an Object Grid Container instance, the properties below
# are needed to overwrite any defaults.
# grid.catalog-server.endPoint a comma-sperated list of host:port numbers specifying the catalog servers
#                              to be used by the client apis.  Also used by the WPMLGridServer debug system.
# grid.client.config       specifies the name of an XML configuration file to used by client 
#                          connections.  If undefined, the server config is used.  If a relative
# 							path, then it is relative to the location of this file.
# grid.link-manager.policies specifies the set of policies to be used by the LinkPolicyManager, which control
#                           the interconnectivity of the domains in the multi-grid.
# grid.link-manager.registry.host specifies the host where the Server Registry is running and that will be
#                           used by the LinkPolicyManager.  Default is localhost.
# grid.link-manager.registry.port specifies the port where the Server Registry is running and that will be
#                           used by the LinkPolicyManager.  Default is 3099.
# grid.link-manager.capabilities specifies the capabilities of this container server.  Format is the same
#                           as in dpr-hosts.properties file, w/o 
grid.catalog-server.endPoint=localhost:2810
grid.link-manager.registry.host=localhost
grid.link-manager.registry.port=3099
grid.link-manager.capabilities=standalone
#grid.client.config=wpml-grid-client.xml

# The following are used for debugging when starting the container server using WPMLGridServer
# grid.debug.deployment.xml - specifies the file name of the containers deployment xml configuration. 
#                             	If a relative path, it is relative to the location of this file.
# grid.debug.maps.xml - specifies the file name of the containers map xml configuration. 
#                             	If a relative path, it is relative to the location of this file.
# grid.debug.catalog-server.properties - specifies the properties file to be used for the CatalogServerProperties.
#								If a relative path, it is relative to the location of this file.
# 							  	Its use overrides tthe following:
# grid.debug.domain-name - name of domain to which this container server belongs
# grid.debug.container-server.properties - specifies a properties file to be used for the 
#    							container's ServerProperties.  
#								If a relative path, it is relative to the location of this file.
#    							Its uses overrides the following 3
# grid.debug.container-server.port - container server listener port
# grid.debug.container-server.name - defines the name of the server
# grid.debug.container-server.jmx.port - container server jmx port
#
grid.debug.container-server.port=3001
grid.container-server.jmx.port=3003

#grid.container-server.name=some-unique-Name
grid.debug.deployment.xml=wpml-grid-deployment.xml
grid.debug.config.xml=wpml-grid-maps-root.xml
#
#
######################### java.util.logging Properties ############################
# These are the java.util.logging properties to control logging in WPML.
# To enable these, set the wpml.logging.enabled=true (see above), or
# set a system property on the command line as follows:
#
#     java -Dlogging.enabled=true
#
# The loggers are generally organized as a 2 level hierarchy, with multiple
# loggers under the root.  They can all be turned on by just setting the 
# root logger to the desired log level.  Or, the lower levels can be 
# turned on by setting their levels,although the root level will need to 
# be at the same level or above to actually see the messages.  Log 
# levels are set using values defined in java.util.Level and include 
#
# OFF, SEVERE, WARNING, INFO, FINE, FINER, FINEST, ALL
#
# Typically the usage is to only set the top level to the desired
# log level (i.e. FINE, etc), end then disable the ones  you're not
# interested (e.g. com.ibm.watson.pml.pdp.level=OFF).
#
handlers=java.util.logging.ConsoleHandler
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.level=ALL
# Turn off some tomcat logging
#org.apache.catalina.loader.WebappClassLoader.level=INFO
#org.apache.tomcat.util.digester.Digester.level=INFO
#org.apache.juli.logging.DirectJDKLog.level=INFO
#org.apache.catalina.startup.Catalina.level=INFO

# The OGLogger setting in the WPML grid code.
#com.ibm.watson.pml.repository.objectgrid.level=FINEST

# Logger for the com.ibm.watson.pml.policy package.
#com.ibm.watson.pml.policy.level=OFF

# Logger for the com.ibm.watson.pml.policy.template package.
#com.ibm.watson.pml.policy.template.level=OFF

# Logger for the com.ibm.watson.pml.pdp and sub-packages.
#com.ibm.watson.pml.pdp.level=OFF

# Logger for the com.ibm.watson.pml.pep and sub-packages.
#com.ibm.watson.pml.pep.level=OFF

# Logger for the com.ibm.watson.pml.repository and sub-packages.
#com.ibm.watson.pml.repository.level=FINE

# Logger for the com.ibm.watson.pml.policy package.
#com.ibm.watson.pml.util.level=OFF

#java.util.logging.ConsoleHandler.level=OFF